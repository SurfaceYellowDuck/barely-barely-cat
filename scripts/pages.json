[{"name":"FIGHT","description":"State.FIGHT","location":"demo1/[root]/-state/-f-i-g-h-t/index.html","searchKeys":["FIGHT","FIGHT","State.FIGHT"]},{"name":"HISS","description":"State.HISS","location":"demo1/[root]/-state/-h-i-s-s/index.html","searchKeys":["HISS","HISS","State.HISS"]},{"name":"SLEEP","description":"State.SLEEP","location":"demo1/[root]/-state/-s-l-e-e-p/index.html","searchKeys":["SLEEP","SLEEP","State.SLEEP"]},{"name":"WALK","description":"State.WALK","location":"demo1/[root]/-state/-w-a-l-k/index.html","searchKeys":["WALK","WALK","State.WALK"]},{"name":"class KDNode(val cat: Cat, val axis: Int, var left: KDNode? = null, var right: KDNode? = null)","description":"KDNode","location":"demo1/[root]/-k-d-node/index.html","searchKeys":["KDNode","class KDNode(val cat: Cat, val axis: Int, var left: KDNode? = null, var right: KDNode? = null)","KDNode"]},{"name":"class KDTree(cats: List<Cat>, distanceFunction: (Cat, Cat) -> Float)","description":"KDTree","location":"demo1/[root]/-k-d-tree/index.html","searchKeys":["KDTree","class KDTree(cats: List<Cat>, distanceFunction: (Cat, Cat) -> Float)","KDTree"]},{"name":"constructor(cat: Cat, axis: Int, left: KDNode? = null, right: KDNode? = null)","description":"KDNode.KDNode","location":"demo1/[root]/-k-d-node/-k-d-node.html","searchKeys":["KDNode","constructor(cat: Cat, axis: Int, left: KDNode? = null, right: KDNode? = null)","KDNode.KDNode"]},{"name":"constructor(cats: List<Cat>, distanceFunction: (Cat, Cat) -> Float)","description":"KDTree.KDTree","location":"demo1/[root]/-k-d-tree/-k-d-tree.html","searchKeys":["KDTree","constructor(cats: List<Cat>, distanceFunction: (Cat, Cat) -> Float)","KDTree.KDTree"]},{"name":"constructor(point: Cat, rotation: Float, fieldOfView: Float)","description":"ViewState.ViewState","location":"demo1/[root]/-view-state/-view-state.html","searchKeys":["ViewState","constructor(point: Cat, rotation: Float, fieldOfView: Float)","ViewState.ViewState"]},{"name":"constructor(sleepProbability: Float, w: Float, h: Float, pc: Int, refTime: Int, r0_small: Float, r0_big: Float, R01_big: Float, R01_small: Float)","description":"Consts.Consts","location":"demo1/[root]/-consts/-consts.html","searchKeys":["Consts","constructor(sleepProbability: Float, w: Float, h: Float, pc: Int, refTime: Int, r0_small: Float, r0_big: Float, R01_big: Float, R01_small: Float)","Consts.Consts"]},{"name":"constructor(x: Dp = 0F.dp, y: Dp = 0F.dp, state: State = State.WALK, sleepTimer: Int = 0, sleepDuration: Int = Random.nextInt(5, 10), isSelected: Boolean = false)","description":"Cat.Cat","location":"demo1/[root]/-cat/-cat.html","searchKeys":["Cat","constructor(x: Dp = 0F.dp, y: Dp = 0F.dp, state: State = State.WALK, sleepTimer: Int = 0, sleepDuration: Int = Random.nextInt(5, 10), isSelected: Boolean = false)","Cat.Cat"]},{"name":"constructor(x: Dp, y: Dp, width: Dp, height: Dp)","description":"Obstacle.Obstacle","location":"demo1/[root]/-obstacle/-obstacle.html","searchKeys":["Obstacle","constructor(x: Dp, y: Dp, width: Dp, height: Dp)","Obstacle.Obstacle"]},{"name":"data class Cat(var x: Dp = 0F.dp, var y: Dp = 0F.dp, var state: State = State.WALK, var sleepTimer: Int = 0, var sleepDuration: Int = Random.nextInt(5, 10), var isSelected: Boolean = false) : Comparable<Cat> ","description":"Cat","location":"demo1/[root]/-cat/index.html","searchKeys":["Cat","data class Cat(var x: Dp = 0F.dp, var y: Dp = 0F.dp, var state: State = State.WALK, var sleepTimer: Int = 0, var sleepDuration: Int = Random.nextInt(5, 10), var isSelected: Boolean = false) : Comparable<Cat> ","Cat"]},{"name":"data class Consts(val sleepProbability: Float, val w: Float, val h: Float, val pc: Int, val refTime: Int, val r0_small: Float, val r0_big: Float, val R01_big: Float, val R01_small: Float)","description":"Consts","location":"demo1/[root]/-consts/index.html","searchKeys":["Consts","data class Consts(val sleepProbability: Float, val w: Float, val h: Float, val pc: Int, val refTime: Int, val r0_small: Float, val r0_big: Float, val R01_big: Float, val R01_small: Float)","Consts"]},{"name":"data class Obstacle(val x: Dp, val y: Dp, val width: Dp, val height: Dp)","description":"Obstacle","location":"demo1/[root]/-obstacle/index.html","searchKeys":["Obstacle","data class Obstacle(val x: Dp, val y: Dp, val width: Dp, val height: Dp)","Obstacle"]},{"name":"data class ViewState(val point: Cat, val rotation: Float, val fieldOfView: Float)","description":"ViewState","location":"demo1/[root]/-view-state/index.html","searchKeys":["ViewState","data class ViewState(val point: Cat, val rotation: Float, val fieldOfView: Float)","ViewState"]},{"name":"enum State : Enum<State> ","description":"State","location":"demo1/[root]/-state/index.html","searchKeys":["State","enum State : Enum<State> ","State"]},{"name":"fun Float.toDegrees(): Float","description":"toDegrees","location":"demo1/[root]/to-degrees.html","searchKeys":["toDegrees","fun Float.toDegrees(): Float","toDegrees"]},{"name":"fun Obstacle.intersects(other: Obstacle): Boolean","description":"intersects","location":"demo1/[root]/intersects.html","searchKeys":["intersects","fun Obstacle.intersects(other: Obstacle): Boolean","intersects"]},{"name":"fun app(Cats: List<Cat>)","description":"app","location":"demo1/[root]/app.html","searchKeys":["app","fun app(Cats: List<Cat>)","app"]},{"name":"fun calculateAlpha(point: Cat, selectedPoint: Cat, fieldOfView: Float, rotation: Float, obstacles: List<Obstacle>): Float","description":"calculateAlpha","location":"demo1/[root]/calculate-alpha.html","searchKeys":["calculateAlpha","fun calculateAlpha(point: Cat, selectedPoint: Cat, fieldOfView: Float, rotation: Float, obstacles: List<Obstacle>): Float","calculateAlpha"]},{"name":"fun calculateObstacleAlpha(obstacle: Obstacle, selectedPoint: Cat, fieldOfView: Float, rotation: Float): Float","description":"calculateObstacleAlpha","location":"demo1/[root]/calculate-obstacle-alpha.html","searchKeys":["calculateObstacleAlpha","fun calculateObstacleAlpha(obstacle: Obstacle, selectedPoint: Cat, fieldOfView: Float, rotation: Float): Float","calculateObstacleAlpha"]},{"name":"fun contains(cat: Cat): Boolean","description":"Obstacle.contains","location":"demo1/[root]/-obstacle/contains.html","searchKeys":["contains","fun contains(cat: Cat): Boolean","Obstacle.contains"]},{"name":"fun distance(cat1: Cat, cat2: Cat, metric: String): Float","description":"distance","location":"demo1/[root]/distance.html","searchKeys":["distance","fun distance(cat1: Cat, cat2: Cat, metric: String): Float","distance"]},{"name":"fun generateRandomCat(screenSize: Pair<Dp, Dp>): Cat","description":"generateRandomCat","location":"demo1/[root]/generate-random-cat.html","searchKeys":["generateRandomCat","fun generateRandomCat(screenSize: Pair<Dp, Dp>): Cat","generateRandomCat"]},{"name":"fun generateRandomObstacle(screenSize: Pair<Dp, Dp>, existingObstacles: List<Obstacle>): Obstacle","description":"generateRandomObstacle","location":"demo1/[root]/generate-random-obstacle.html","searchKeys":["generateRandomObstacle","fun generateRandomObstacle(screenSize: Pair<Dp, Dp>, existingObstacles: List<Obstacle>): Obstacle","generateRandomObstacle"]},{"name":"fun getRandomFloatInRange(a: Dp, b: Dp): Dp","description":"getRandomFloatInRange","location":"demo1/[root]/get-random-float-in-range.html","searchKeys":["getRandomFloatInRange","fun getRandomFloatInRange(a: Dp, b: Dp): Dp","getRandomFloatInRange"]},{"name":"fun initCats(count: Int, screenSize: Pair<Dp, Dp>, obstacles: List<Obstacle>): List<Cat>","description":"initCats","location":"demo1/[root]/init-cats.html","searchKeys":["initCats","fun initCats(count: Int, screenSize: Pair<Dp, Dp>, obstacles: List<Obstacle>): List<Cat>","initCats"]},{"name":"fun initObstacles(count: Int, screenSize: Pair<Dp, Dp>): List<Obstacle>","description":"initObstacles","location":"demo1/[root]/init-obstacles.html","searchKeys":["initObstacles","fun initObstacles(count: Int, screenSize: Pair<Dp, Dp>): List<Obstacle>","initObstacles"]},{"name":"fun main()","description":"main","location":"demo1/[root]/main.html","searchKeys":["main","fun main()","main"]},{"name":"fun nearestNeighbor(target: Cat): Cat?","description":"KDTree.nearestNeighbor","location":"demo1/[root]/-k-d-tree/nearest-neighbor.html","searchKeys":["nearestNeighbor","fun nearestNeighbor(target: Cat): Cat?","KDTree.nearestNeighbor"]},{"name":"fun updateCats(cats: List<Cat>, catsKDTree: KDTree, distance: (Cat, Cat) -> Float, screenSize: Pair<Dp, Dp>, obstacles: List<Obstacle>): List<Cat>","description":"updateCats","location":"demo1/[root]/update-cats.html","searchKeys":["updateCats","fun updateCats(cats: List<Cat>, catsKDTree: KDTree, distance: (Cat, Cat) -> Float, screenSize: Pair<Dp, Dp>, obstacles: List<Obstacle>): List<Cat>","updateCats"]},{"name":"fun valueOf(value: String): State","description":"State.valueOf","location":"demo1/[root]/-state/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): State","State.valueOf"]},{"name":"fun values(): Array<State>","description":"State.values","location":"demo1/[root]/-state/values.html","searchKeys":["values","fun values(): Array<State>","State.values"]},{"name":"open operator override fun compareTo(other: Cat): Int","description":"Cat.compareTo","location":"demo1/[root]/-cat/compare-to.html","searchKeys":["compareTo","open operator override fun compareTo(other: Cat): Int","Cat.compareTo"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"Cat.equals","location":"demo1/[root]/-cat/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","Cat.equals"]},{"name":"open override fun hashCode(): Int","description":"Cat.hashCode","location":"demo1/[root]/-cat/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","Cat.hashCode"]},{"name":"val R01_big: Float","description":"Consts.R01_big","location":"demo1/[root]/-consts/-r01_big.html","searchKeys":["R01_big","val R01_big: Float","Consts.R01_big"]},{"name":"val R01_small: Float","description":"Consts.R01_small","location":"demo1/[root]/-consts/-r01_small.html","searchKeys":["R01_small","val R01_small: Float","Consts.R01_small"]},{"name":"val axis: Int","description":"KDNode.axis","location":"demo1/[root]/-k-d-node/axis.html","searchKeys":["axis","val axis: Int","KDNode.axis"]},{"name":"val cat: Cat","description":"KDNode.cat","location":"demo1/[root]/-k-d-node/cat.html","searchKeys":["cat","val cat: Cat","KDNode.cat"]},{"name":"val consts: Consts","description":"consts","location":"demo1/[root]/consts.html","searchKeys":["consts","val consts: Consts","consts"]},{"name":"val entries: EnumEntries<State>","description":"State.entries","location":"demo1/[root]/-state/entries.html","searchKeys":["entries","val entries: EnumEntries<State>","State.entries"]},{"name":"val fieldOfView: Float","description":"ViewState.fieldOfView","location":"demo1/[root]/-view-state/field-of-view.html","searchKeys":["fieldOfView","val fieldOfView: Float","ViewState.fieldOfView"]},{"name":"val file: File","description":"file","location":"demo1/[root]/file.html","searchKeys":["file","val file: File","file"]},{"name":"val filePath: String","description":"filePath","location":"demo1/[root]/file-path.html","searchKeys":["filePath","val filePath: String","filePath"]},{"name":"val h: Float","description":"Consts.h","location":"demo1/[root]/-consts/h.html","searchKeys":["h","val h: Float","Consts.h"]},{"name":"val h: Float","description":"h","location":"demo1/[root]/h.html","searchKeys":["h","val h: Float","h"]},{"name":"val height: Dp","description":"Obstacle.height","location":"demo1/[root]/-obstacle/height.html","searchKeys":["height","val height: Dp","Obstacle.height"]},{"name":"val height: Dp","description":"height","location":"demo1/[root]/height.html","searchKeys":["height","val height: Dp","height"]},{"name":"val jsonString: String","description":"jsonString","location":"demo1/[root]/json-string.html","searchKeys":["jsonString","val jsonString: String","jsonString"]},{"name":"val pc: Int","description":"Consts.pc","location":"demo1/[root]/-consts/pc.html","searchKeys":["pc","val pc: Int","Consts.pc"]},{"name":"val pc: Int","description":"pc","location":"demo1/[root]/pc.html","searchKeys":["pc","val pc: Int","pc"]},{"name":"val point: Cat","description":"ViewState.point","location":"demo1/[root]/-view-state/point.html","searchKeys":["point","val point: Cat","ViewState.point"]},{"name":"val r0_big: Float","description":"Consts.r0_big","location":"demo1/[root]/-consts/r0_big.html","searchKeys":["r0_big","val r0_big: Float","Consts.r0_big"]},{"name":"val r0_small: Float","description":"Consts.r0_small","location":"demo1/[root]/-consts/r0_small.html","searchKeys":["r0_small","val r0_small: Float","Consts.r0_small"]},{"name":"val refTime: Int","description":"Consts.refTime","location":"demo1/[root]/-consts/ref-time.html","searchKeys":["refTime","val refTime: Int","Consts.refTime"]},{"name":"val refTime: Int","description":"refTime","location":"demo1/[root]/ref-time.html","searchKeys":["refTime","val refTime: Int","refTime"]},{"name":"val rotation: Float","description":"ViewState.rotation","location":"demo1/[root]/-view-state/rotation.html","searchKeys":["rotation","val rotation: Float","ViewState.rotation"]},{"name":"val screenSize: Pair<Dp, Dp>","description":"screenSize","location":"demo1/[root]/screen-size.html","searchKeys":["screenSize","val screenSize: Pair<Dp, Dp>","screenSize"]},{"name":"val sleepProbability: Float","description":"Consts.sleepProbability","location":"demo1/[root]/-consts/sleep-probability.html","searchKeys":["sleepProbability","val sleepProbability: Float","Consts.sleepProbability"]},{"name":"val sleepProbability: Float","description":"sleepProbability","location":"demo1/[root]/sleep-probability.html","searchKeys":["sleepProbability","val sleepProbability: Float","sleepProbability"]},{"name":"val w: Float","description":"Consts.w","location":"demo1/[root]/-consts/w.html","searchKeys":["w","val w: Float","Consts.w"]},{"name":"val w: Float","description":"w","location":"demo1/[root]/w.html","searchKeys":["w","val w: Float","w"]},{"name":"val width: Dp","description":"Obstacle.width","location":"demo1/[root]/-obstacle/width.html","searchKeys":["width","val width: Dp","Obstacle.width"]},{"name":"val width: Dp","description":"width","location":"demo1/[root]/width.html","searchKeys":["width","val width: Dp","width"]},{"name":"val x: Dp","description":"Obstacle.x","location":"demo1/[root]/-obstacle/x.html","searchKeys":["x","val x: Dp","Obstacle.x"]},{"name":"val y: Dp","description":"Obstacle.y","location":"demo1/[root]/-obstacle/y.html","searchKeys":["y","val y: Dp","Obstacle.y"]},{"name":"var dist: (Cat, Cat) -> Float","description":"KDTree.dist","location":"demo1/[root]/-k-d-tree/dist.html","searchKeys":["dist","var dist: (Cat, Cat) -> Float","KDTree.dist"]},{"name":"var isSelected: Boolean","description":"Cat.isSelected","location":"demo1/[root]/-cat/is-selected.html","searchKeys":["isSelected","var isSelected: Boolean","Cat.isSelected"]},{"name":"var left: KDNode?","description":"KDNode.left","location":"demo1/[root]/-k-d-node/left.html","searchKeys":["left","var left: KDNode?","KDNode.left"]},{"name":"var right: KDNode?","description":"KDNode.right","location":"demo1/[root]/-k-d-node/right.html","searchKeys":["right","var right: KDNode?","KDNode.right"]},{"name":"var root: KDNode?","description":"KDTree.root","location":"demo1/[root]/-k-d-tree/root.html","searchKeys":["root","var root: KDNode?","KDTree.root"]},{"name":"var sleepDuration: Int","description":"Cat.sleepDuration","location":"demo1/[root]/-cat/sleep-duration.html","searchKeys":["sleepDuration","var sleepDuration: Int","Cat.sleepDuration"]},{"name":"var sleepTimer: Int","description":"Cat.sleepTimer","location":"demo1/[root]/-cat/sleep-timer.html","searchKeys":["sleepTimer","var sleepTimer: Int","Cat.sleepTimer"]},{"name":"var state: State","description":"Cat.state","location":"demo1/[root]/-cat/state.html","searchKeys":["state","var state: State","Cat.state"]},{"name":"var x: Dp","description":"Cat.x","location":"demo1/[root]/-cat/x.html","searchKeys":["x","var x: Dp","Cat.x"]},{"name":"var y: Dp","description":"Cat.y","location":"demo1/[root]/-cat/y.html","searchKeys":["y","var y: Dp","Cat.y"]}]